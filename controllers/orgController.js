const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
require('dotenv').config();
const { SystemAdmin, Organization, Employee, OrganizationAdmin , SafetyEngineer , Issue} = require('../models');


 const { Op } = require('sequelize'); // üåü Op-–≥ –∏–º–ø–æ—Ä—Ç–ª–æ–Ω–æ

exports.getDashboardStats = async (req, res) => {
  try {
    // ‚ùó systemAdminId —à–∞–ª–≥–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π –±–æ–ª—Å–æ–Ω
    // const user = req.user; 

    // 1Ô∏è‚É£ –ë“Ø—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥—ã–≥ –∞–≤–Ω–∞
    const organizations = await Organization.findAll({
      attributes: ['id']
    });

    const organizationIds = organizations.map(org => org.id);

    if (organizationIds.length === 0) {
      return res.json({
        organizations: 0,
        employees: 0,
        reports: 0
      });
    }

    // 2Ô∏è‚É£ –ë“Ø—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥—ã–Ω –∞–∂–∏–ª—á–¥—ã–Ω –Ω–∏–π—Ç —Ç–æ–æ (Employee)
    const employeeCount = await Employee.count({
      where: {
        organization_id: {
          [Op.in]: organizationIds
        }
      }
    });

    // 3Ô∏è‚É£ –ë“Ø—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥—ã–Ω –•–ê–ë –∏–Ω–∂–µ–Ω–µ—Ä“Ø“Ø–¥–∏–π–Ω —Ç–æ–æ (SafetyEngineer)
    const safetyEngineerCount = await SafetyEngineer.count({
      where: {
        organization_id: {
          [Op.in]: organizationIds
        }
      }
    });

    // 4Ô∏è‚É£ –ë“Ø—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥—ã–Ω –Ω–∏–π—Ç –∞–¥–º–∏–Ω (OrganizationAdmin)
    const organizationAdminCount = await OrganizationAdmin.count({
      where: {
        organization_id: {
          [Op.in]: organizationIds
        }
      }
    });

    const employees = employeeCount + safetyEngineerCount + organizationAdminCount; // ‚úÖ –ù–∏–π—Ç –∞–∂–∏–ª—á–∏–¥ + –•–ê–ë –∏–Ω–∂–µ–Ω–µ—Ä“Ø“Ø–¥ + –∞–¥–º–∏–Ω

    // 5Ô∏è‚É£ –ë“Ø—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –Ω–∏–π—Ç –º—ç–¥—ç–≥–¥—ç–ª (Issue)
    const reports = await Issue.count({
      where: {
        organization_id: {
          [Op.in]: organizationIds
        }
      }
    });

    res.json({
      organizations: organizationIds.length, // –Ω–∏–π—Ç –±–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ç–æ–æ
      employees,                              // –Ω–∏–π—Ç –∞–∂–∏–ª—á–∏–¥
      reports                                 // –Ω–∏–π—Ç –º—ç–¥—ç–≥–¥—ç–ª
    });

  } catch (error) {
    console.error('üìä Dashboard –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ message: '–î–∞—à–±–æ–∞—Ä–¥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};





exports.getOrgDashboard = async (req, res) => {
  try {
    const user = req.user; 
    const organizationId = user.organization_id; // ‚úÖ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –∞–¥–º–∏–Ω—ã —Ö–∞—Ä—å—è–∞–ª—Å–∞–Ω –±–∞–π–≥—É—É–ª–ª–∞–≥–∞

    if (!organizationId) {
      return res.status(400).json({ message: '–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    // 1Ô∏è‚É£ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –∞–∂–∏–ª—á–¥—ã–Ω –Ω–∏–π—Ç —Ç–æ–æ (Employee)
    const employeeCount = await Employee.count({
      where: { organization_id: organizationId }
    });

    // 2Ô∏è‚É£ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –•–ê–ë –∏–Ω–∂–µ–Ω–µ—Ä“Ø“Ø–¥–∏–π–Ω –Ω–∏–π—Ç —Ç–æ–æ (SafetyEngineer)
    const safetyEngineerCount = await SafetyEngineer.count({
      where: { organization_id: organizationId }
    });

    const employees = employeeCount + safetyEngineerCount; // üî• –ù–∏–π—Ç –∞–∂–∏–ª—Ç–∞–Ω

    // 3Ô∏è‚É£ –ë–∞–π–≥—É—É–ª–ª–∞–≥–∞–¥ –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –Ω–∏–π—Ç Issue
    const incidents = await Issue.count({
      where: { organization_id: organizationId }
    });

    // 4Ô∏è‚É£ –¢–∞–π–ª–∞–Ω–≥–∏–π–Ω —Ç–æ–æ -> –•–∞—Ç—É—É 5 —Ç–∞–≤–∏–Ω–∞
    const reports = 5;

    res.json({
      employees,
      reports,
      incidents
    });

  } catch (error) {
    console.error('üìä Dashboard –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ message: '–î–∞—à–±–æ–∞—Ä–¥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};



exports.getProfile = async (req, res) => {
  try {
    const admin = await SystemAdmin.findByPk(req.params.id);

    if (!admin) {
      return res.status(404).json({ message: '–ê–¥–º–∏–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    const orgCount = await Organization.count();
    const employeeCount = await Employee.count();

    res.json({
      user: admin.username,
      email: admin.email,
      phone: admin.phone,
      image: admin.profile, 
      joinedDate: admin.created_at ? admin.created_at.toISOString().split('T')[0] : null,
      employees: employeeCount,
      organizations: orgCount,
    });
  } catch (err) {
    console.error('‚ùå –ü—Ä–æ—Ñ–∞–π–ª –∞–≤–∞—Ö –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞', error: err.message });
  }
};


exports.deleteOrganization = async (req, res) => {
  try {
    const org = await Organization.findByPk(req.params.id);

    if (!org) {
      return res.status(404).json({ message: '–£—Å—Ç–≥–∞—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    // –•–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π –∞–∂–∏–ª—á–∏–¥, —Ç–∞–π–ª–∞–Ω, —Ç–æ—Ö–∏—Ä–≥–æ–æ –≥—ç—Ö –º—ç—Ç —É—Å—Ç–≥–∞—Ö –±–æ–ª —ç–Ω–¥ –Ω—ç–º–Ω—ç
    await Employee.destroy({ where: { organization_id: org.id } });
    // await Report.destroy({ where: { organization_id: org.id } });
  await OrganizationAdmin.destroy({ where :{organization_id: org.id}});
    await org.destroy();

    res.json({ message: '–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞.' });
  } catch (err) {
    console.error('–£—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–£—Å—Ç–≥–∞—Ö “Ø–π–ª–¥—ç–ª –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ', error: err.message });
  }
};



exports.getOrganizations = async (req, res) => {
  try {
    const organizations = await Organization.findAll({
      attributes: ['id', 'name'],
      include: [
        {
          model: Employee,
          attributes: [],
        },
      ],
      group: ['Organization.id'],
      raw: true,
      nest: true,
    });

    const orgsWithEmployeeCount = await Promise.all(
      organizations.map(async (org) => {
        const employeeCount = await Employee.count({
          where: { organization_id: org.id },
        });
        return {
          ...org,
          employeeCount,
        };
      })
    );

    res.json(orgsWithEmployeeCount);
  } catch (error) {
    console.error('‚ùå –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ message: '–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};



exports.getOrganizationStatusById = async (req, res) => {
  const { id } = req.params;

  try {
    const organization = await Organization.findByPk(id);

    if (!organization) {
      return res.status(404).json({ message: '–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    const employeeCount = await Employee.count({
      where: { organization_id: id },
    });

    const activeUsers = await Employee.count({
      where: {
        organization_id: id,
        is_active: true, // –•—ç—Ä–≤—ç—ç is_active —Ç–∞–ª–±–∞—Ä –±–∞–π–≥–∞–∞ –±–æ–ª
      },
    });

    res.json({
      id: organization.id,
      employeeCount,
      activeUsers,
      updated_at: organization.updated_at,
    });
  } catch (error) {
    console.error('üìõ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
  }
};
 



// controllers/systemAdminOrgController.js
exports.getOrganizationById = async (req, res) => {
  try {
    const org = await Organization.findByPk(req.params.id);

    if (!org) {
      return res.status(404).json({ message: '–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    res.json({
      name: org.name,
      logo: org.profile || null,
      industry: org.activity_type || '–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π',
      registered: org.created_at?.toISOString().split('T')[0] || '',
      phone: org.phone || '',
      email: org.email || '',
      address: org.address ||'',
    });
  } catch (err) {
    console.error('–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ —Ç–∞—Ç–∞—Ö –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
  }
};




const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const transporter = require('../utils/email');
const verifyEmailGeneric = require('../utils/verify');
const { SystemAdmin } = require('../models');
require('dotenv').config();

// üìå –°–∏—Å—Ç–µ–º–∏–π–Ω –∞–¥–º–∏–Ω –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö
exports.register = async (req, res) => {
  try { 
    const { username, password, email  } = req.body;

    // ‚úÖ –ò–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç —à–∞–ª–≥–∞—Ö
    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ message: '–ò–º—ç–π–ª —Ö–∞—è–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞.' });
    }

    // ‚úÖ –ò–º—ç–π–ª –¥–∞–≤—Ö—Ü–∞—Ö —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
    const existing = await SystemAdmin.findOne({ where: { email } });
    if (existing) {
      return res.status(400).json({ message: 'Email —Ö–∞—è–≥ –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.' });
    }

    // ‚úÖ –ù—É—É—Ü “Ø–≥ —Ö—ç—à–ª—ç—Ö
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ –ê–¥–º–∏–Ω “Ø“Ø—Å–≥—ç—Ö
    const user = await SystemAdmin.create({
      username,
      password: hashedPassword,
      email,
      role: 'System_admin',
    });

    // ‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1d' });

    // ‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –ª–∏–Ω–∫
    const verificationUrl = `${process.env.BASE_URL}/api/auth/verify-email?token=${token}`;

    // ‚úÖ –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
    await transporter.sendMail({
      from: `"EHS System" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: 'Verify your email',
      html: `<p>Welcome! <br> Please verify your email by clicking <a href="${verificationUrl}">this link</a>.</p>`,
    });

    res.status(201).json({ message: 'Admin –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç. –ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.' });
  } catch (error) {
    console.error('‚ùå –ë“Ø—Ä—Ç–≥—ç–ª –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// üìå –°–∏—Å—Ç–µ–º–∏–π–Ω –∞–¥–º–∏–Ω –Ω—ç–≤—Ç—Ä—ç—Ö
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await SystemAdmin.findOne({ where: { email } });
    if (!user) return res.status(404).json({ message: '–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π.' });

    if (!user.verified) {
      return res.status(403).json({ message: '–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–∞–∞–≥“Ø–π –±–∞–π–Ω–∞.' });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).json({ message: '–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞.' });

    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '2h' });

    res.status(200).json({
      token,
      message: '–ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç—Ç–∞–π.',
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        role: user.role,
      },
    });
  } catch (error) {
    console.error('‚ùå Login –∞–ª–¥–∞–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// üìå Email –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö (verify-email)
exports.verifyEmail = async (req, res) => {
  verifyEmailGeneric(req, res, SystemAdmin);
};

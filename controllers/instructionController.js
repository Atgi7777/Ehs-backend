

const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

require("dotenv").config();
const {
  Group,
  GroupInstruction,
  SafetyInstruction,
  InstructionPage
} = require("../models"); 

exports.shareInstructionToGroups = async (req, res) => {
  const { instructionId } = req.params;
  const instructionIdNumber = Number(instructionId);
  const { groupIds } = req.body;

  if (!Array.isArray(groupIds) || groupIds.length === 0) {
    return res.status(400).json({ error: 'groupIds —Ç–∞–ª–±–∞—Ä—Ç —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 1 ID –±–∞–π—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π' });
  }

  try {
    console.log("backend received:", instructionIdNumber, groupIds);

    const instruction = await SafetyInstruction.findByPk(instructionIdNumber);
    if (!instruction) {
      return res.status(404).json({ error: `–ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ ID=${instructionIdNumber} –æ–ª–¥—Å–æ–Ω–≥“Ø–π` });
    }

    const createdRecords = [];

    for (const groupId of groupIds) {
      const groupIdNumber = Number(groupId);

      // –î–∞–≤—Ö–∞—Ä–¥—Å–∞–Ω —Ö–æ—Å insert —Ö–∏–π—Ö–≥“Ø–π –±–∞–π—Ö–∞–∞—Ä —à–∞–ª–≥–∞–Ω–∞
      const exists = await GroupInstruction.findOne({
        where: {
          group_id: groupIdNumber,
          safetyInstruction_id: instructionIdNumber,
        },
      });

      if (!exists) {
        const record = await GroupInstruction.create({
          group_id: groupIdNumber,
          safetyInstruction_id: instructionIdNumber,
        });
        createdRecords.push(record);
      }
    }

    res.status(200).json({
      message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç',
      instructionId: instructionIdNumber,
      groupIds,
      inserted: createdRecords.length,
      data: createdRecords,
    });
  } catch (err) {
    console.error('–ò–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ error: '–î–æ—Ç–æ–æ–¥ —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞', details: err.message });
  }
};


exports.getSlidesByInstructionId = async (req, res) => {
    try {
      const { id } = req.params;
  
      const slides = await InstructionPage.findAll({
        where: { safety_instruction_id: id },
        order: [['id', 'ASC']], // –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä
      });
  
      if (!slides || slides.length === 0) {
        return res.status(404).json({ message: '–°–ª–∞–π–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
      }
  
      res.status(200).json(slides);
    } catch (error) {
      console.error('‚ö†Ô∏è –°–ª–∞–π–¥ —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
      res.status(500).json({ message: '–î–æ—Ç–æ–æ–¥ —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
    }
  };



  // exports.getSharedGroups = async (req, res) => {
  //   try {
  //     const { id: instructionId } = req.params;
  
  //     const shared = await GroupInstruction.findAll({
  //       where: { safetyInstruction_id: instructionId },
  //       attributes: ['group_id'],
  //     });
  
  //     const groupIds = shared.map(g => g.group_id);
  //     res.json({ groupIds });
  //   } catch (err) {
  //     console.error('Shared groups fetch error:', err);
  //     res.status(500).json({ error: '–î–æ—Ç–æ–æ–¥ —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
  //   }
  // };
  
  exports.getSharedGroups = async (req, res) => {
    try {
      const { id } = req.params;
      const instructions = await GroupInstruction.findAll({
        where: { safetyInstruction_id: id },
        attributes: ['group_id'],
      });
  
      const groupIds = instructions.map(inst => inst.group_id);
      res.json({ groupIds }); // ‚¨Ö –∑”©–≤ format
    } catch (error) {
      console.error('–ò–ª–≥—ç—ç–≥–¥—Å—ç–Ω –±“Ø–ª—ç–≥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
      res.status(500).json({ error: 'Server error' });
    }
  };
  

  exports.getInstructionsByGroup = async (req, res) => {
    const { groupId } = req.params;
  
    try {
      const instructions = await GroupInstruction.findAll({
        where: { group_id: groupId },
        include: [
          {
            model: SafetyInstruction,
            as: 'safetyInstruction',
          },
        ],
        order: [['assigned_at', 'DESC']],
      });
  
      const formatted = instructions.map((entry) => entry.safetyInstruction);
  
      res.status(200).json(formatted);
    } catch (err) {
      console.error('–ë“Ø–ª–≥–∏–π–Ω –∑–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ —Ç–∞—Ç–∞—Ö –∞–ª–¥–∞–∞:', err);
      res.status(500).json({ message: '–î–æ—Ç–æ–æ–¥ —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
    }
  };

  exports.unshareGroupFromInstruction = async (req, res) => {
    const { id: instructionId, groupId } = req.params;
  
    try {
      const deleted = await GroupInstruction.destroy({
        where: {
          safetyInstruction_id: instructionId,
          group_id: groupId,
        },
      });
  
      if (deleted === 0) { 
        return res.status(404).json({ message: '–•–∞—Ä–≥–∞–ª–∑–∞—Ö –±“Ø—Ä—Ç–≥—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
      }
  
      res.json({ message: '–ë“Ø–ª—ç–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Å–∞–≥–¥–ª–∞–∞' });
    } catch (error) {
      console.error('üìõ –ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞–Ω–∞–∞—Å –±“Ø–ª—ç–≥ —Ö–∞—Å–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', error);
      res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
    }
  };



// ‚úÖ –ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ —É—Å—Ç–≥–∞—Ö (DELETE /api/instructions/:id)
exports.deleteInstruction = async (req, res) => {
  try {
    const { id } = req.params;

    const instruction = await SafetyInstruction.findByPk(id);
    if (!instruction) return res.status(404).json({ message: '–ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });

    await instruction.destroy();

    res.json({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞' });
  } catch (err) {
    console.error('‚ùå –£—Å—Ç–≥–∞—Ö –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
  }
};



exports.getInstructionWithPages = async (req, res) => {
  const { id } = req.params;

  try {
    const instruction = await SafetyInstruction.findByPk(id, {
      include: [
        {
          model: InstructionPage,
          as: 'InstructionPages', // ‚¨ÖÔ∏è —ç–Ω—ç –Ω—å models/index.js –¥–∞—Ö—å alias-—Ç–∞–π —Ç–∞–∞—Ä–∞—Ö —ë—Å—Ç–æ–π
          order: [['page_order', 'ASC']],
        },
      ],
    });

    if (!instruction) {
      return res.status(404).json({ message: '–ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    res.json(instruction);
  } catch (err) {
    console.error('‚ö†Ô∏è –ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ –±–æ–ª–æ–Ω —Ö—É—É–¥–∞—Å —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};



// –ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞–≥ —à–∏–Ω—ç—á–ª—ç—Ö
exports.updateInstruction = async (req, res) => {
  const { id } = req.params;
  const {
    title,
    number,
    description,
    start_date,
    end_date,
  } = req.body;

  try {
    const instruction = await SafetyInstruction.findByPk(id);
    if (!instruction) {
      return res.status(404).json({ message: '–ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    await instruction.update({
      title,
      number,
      description,
      start_date,
      end_date,
    });

    res.json({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–∏–ª–ª—ç—ç' });
  } catch (err) {
    console.error('‚ö†Ô∏è –ó–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞ —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–®–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};

// –®–∏–Ω—ç —Ö—É—É–¥–∞—Å “Ø“Ø—Å–≥—ç—Ö
exports.createPage = async (req, res) => {
  const {
    safetyInstruction_id,
    description,
    page_order,
    location,
    image_url,
    video_url,
    audio_url,
  } = req.body;

  try {
    const page = await InstructionPage.create({
      safetyInstruction_id,
      description,
      page_order,
      location,
      image_url,
      video_url,
      audio_url,
    });

    res.status(201).json({ message: '–•—É—É–¥–∞—Å –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º–ª—ç—ç', page });
  } catch (err) {
    console.error('‚ö†Ô∏è –•—É—É–¥–∞—Å “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–•—É—É–¥–∞—Å “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};



exports.addInstructionPage = async (req, res) => {
  try {
    const instructionId = req.params.id;
    const { description, page_order, location } = req.body;
    const file = req.file;

    let image_url = null;
    let audio_url = null;
    let video_url = null;

    if (file) {
      const mime = file.mimetype;
      const relativePath = path.join(file.destination.split('/').pop(), file.filename);

      if (mime.startsWith("image/")) {
        image_url = relativePath;
      } else if (mime.startsWith("audio/")) {
        audio_url = relativePath;
      } else if (mime.startsWith("video/")) {
        video_url = relativePath;
      }
    }

    const newPage = await InstructionPage.create({
      safetyInstruction_id: instructionId,
      description,
      page_order,
      location,
      image_url,
      audio_url,
      video_url,
    });

    res.status(201).json(newPage);
  } catch (err) {
    console.error("üìõ Error saving instruction page:", err);
    res.status(500).json({
      message: "–ê–ª–¥–∞–∞: –•—É—É–¥–∞—Å —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
    });
  }
};



// controllers/instructionController.js
exports.deletePage = async (req, res) => {
  const { id } = req.params;

  try {
    const page = await InstructionPage.findByPk(id);
    if (!page) return res.status(404).json({ message: '–•—É—É–¥–∞—Å –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });

    await page.destroy();
    res.json({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–ª–∞–∞' });
  } catch (err) {
    console.error('‚ùå –£—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ message: '–£—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};
